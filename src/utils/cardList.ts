import shuffleArray from './shuffleArray';

// [
//   '取り札番号',
//   'テキスト',
//   '読み札番号',
//   'クラス名',
//   '引数',
//   '戻り値',
//   '説明',
//   '答え',
// ]

const cardList = [
  [
    '001',
    'BasicObject#\r\nmethod_missing',
    '051',
    'BasicObject',
    '未定義メソッド名と可変長引数',
    'Object',
    '呼び出されたメソッドが定義されていない時、Rubyインタプリタが呼び出すメソッド。',
    'BasicObject#method_missing',
  ],
  [
    '002',
    'Object#public_send',
    '052',
    'Object',
    'メソッド名と可変長引数',
    'Object',
    'メソッドを呼び出し実行結果を返す。publicメソッドを呼び出す。',
    'Object#public_send',
  ],
  [
    '003',
    'Object#send',
    '053',
    'Object',
    'メソッド名と可変長引数',
    'Object',
    'メソッドを呼び出し実行結果を返す。privateメソッドも呼び出せる。',
    'Object#send',
  ],
  [
    '004',
    'Object#is_a?',
    '054',
    'Object',
    '比較するオブジェクトをとる',
    'bool',
    '引数に指定されたクラスかそのサブクラスのインスタンスか判定する。',
    'Object#is_a?',
  ],
  [
    '005',
    'Object#inspect',
    '055',
    'Object',
    'なし',
    'String',
    'オブジェクトを人間が読める形式に変換した文字列を返す。',
    'Object#inspect',
  ],
  [
    '006',
    'Object#==',
    '056',
    'Object',
    '同値性で比較するオブジェクト',
    'bool',
    'オブジェクトの同値性を比較する。',
    'Object#==',
  ],
  [
    '007',
    'Object#equal?',
    '057',
    'Object',
    '同一性で比較するオブジェクト',
    'bool',
    'オブジェクトの同一性を比較する。',
    'Object#equal?',
  ],
  [
    '008',
    'Array#flatten',
    '058',
    'Array',
    '平坦化の再帰の深さを指定する',
    'Array',
    '自身を再帰的に平坦化した配列を生成して返す。',
    'Array#flatten',
  ],
  [
    '009',
    'Array#<<',
    '059',
    'Array',
    'レシーバーに加えたいオブジェクト',
    'self',
    '引数を自身の末尾に破壊的に追加する。',
    'Array#<<',
  ],
  [
    '010',
    'Array#filter',
    '060',
    'Array',
    '各要素を評価するブロックをとった場合',
    'Array',
    '各要素に対してブロックを評価した値が真であった要素を全て含む配列を返す。',
    'Array#filter',
  ],
  [
    '011',
    'Array#reject',
    '061',
    'Array',
    '各要素を評価するブロックをとった場合',
    'Array',
    '各要素に対しブロックを実行しその値が偽の要素を集めた新しい配列を返す。',
    'Array#reject',
  ],
  [
    '012',
    'Array#size',
    '062',
    'Array',
    'なし',
    'Integer',
    '配列の要素数を返す。',
    'Array#size',
  ],
  [
    '013',
    'Array#join',
    '063',
    'Array',
    '間に挟む文字列を指定できる',
    'String',
    '配列の要素を連結した文字列を返す。',
    'Array#join',
  ],
  [
    '014',
    'Array#include?',
    '064',
    'Array',
    '同値性で比較するオブジェクト',
    'bool',
    'レシーバーが引数オブジェクトと==で等しい要素を持つか判定する。',
    'Array#include?',
  ],
  [
    '015',
    'Data.define',
    '065',
    'Data',
    '値オブジェクトをクラス定義する可変長引数',
    'Class',
    'イミュータブルな値オブジェクトの\r\nクラスを定義する。',
    'Data.define',
  ],
  [
    '016',
    'Hash#compact',
    '066',
    'Hash',
    'なし',
    'Hash',
    '値がnilのものを自身から取り除いたHashを生成して返す。',
    'Hash#compact',
  ],
  [
    '017',
    'Hash#merge',
    '067',
    'Hash',
    'マージ対象のHash',
    'Hash',
    'Hashの内容をマージした結果を返す。',
    'Hash#merge',
  ],
  [
    '018',
    'Hash#transform_keys',
    '068',
    'Hash',
    '各要素のキーを評価するブロックをとる場合',
    'Hash',
    'すべてのキーに対してブロックを呼び出した結果で置き換えたHashを返す。',
    'Hash#transform_keys',
  ],
  [
    '019',
    'Hash#\r\ntransform_values',
    '069',
    'Hash',
    '各要素の値を評価するブロックをとった場合',
    'Hash',
    'すべての値に対してブロックを呼び出した結果で置き換えたHashを返す。',
    'Hash#transform_values',
  ],
  [
    '020',
    'Method#\r\nsource_location',
    '070',
    'Method',
    'なし',
    'Array',
    'ソースコードのファイル名と行番号を配列で返す。',
    'Method#source_location',
  ],
  [
    '021',
    'Method#curry',
    '071',
    'Method',
    '引数の数を指定できる',
    'Proc',
    '自身を元にカリー化したProcを返す。',
    'Method#curry',
  ],
  [
    '022',
    'Module#refine',
    '072',
    'Module',
    '拡張対象のクラスもしくはモジュール',
    'Module',
    '引数で指定したクラスをブロック内のメソッド等で拡張する。',
    'Module#refine',
  ],
  [
    '023',
    'Integer#even?',
    '073',
    'Integer',
    'なし',
    'bool',
    '自身が偶数であるかを真偽値で返す。',
    'Integer#even?',
  ],
  [
    '024',
    'Integer#succ',
    '074',
    'Integer',
    'なし',
    'Integer',
    'レシーバーの次の整数を返す。',
    'Integer#succ',
  ],
  [
    '025',
    'Proc#<<',
    '075',
    'Proc',
    'callメソッドを持った任意のオブジェクト',
    'Proc',
    '自身と引数を合成したProcを返す。',
    'Proc#<<',
  ],
  [
    '026',
    'RubyVM::\r\nAbstractSyntaxTree\r\n.parse',
    '076',
    'RubyVM::AbstractSyntaxTree',
    'ソースコード文字列',
    'RubyVM::AbstractSyntaxTree::Node',
    '文字列を抽象構文木にパースしその木の根ノードを返す。',
    'RubyVM::AbstractSyntaxTree.parse',
  ],
  [
    '027',
    'RubyVM::\r\nInstructionSequence.\r\ncompile',
    '077',
    'RubyVM::InstructionSequence',
    'ソースコード文字列',
    'RubyVM::InstructionSequence',
    '引数で指定した Ruby のソースコードのiseqオブジェクトを返す。',
    'RubyVM::InstructionSequence.compile',
  ],
  [
    '028',
    'RubyVM::YJIT.\r\nenabled?',
    '078',
    'RubyVM::YJIT',
    'なし',
    'bool',
    'YJITが有効になっているか判定する。',
    'RubyVM::YJIT.enabled?',
  ],
  [
    '029',
    'String#encode',
    '079',
    'String',
    '変換先のエンコーディング',
    'String',
    'レシーバーを指定した文字コードに変換した\r\n文字列を作成して返す。',
    'String#encode',
  ],
  [
    '030',
    'String#split',
    '080',
    'String',
    '文字列分割のセパレータを指定できる',
    'Array',
    '引数で指定したセパレータによって文字列を分割する。',
    'String#split',
  ],
  [
    '031',
    'String#chomp',
    '081',
    'String',
    '改行文字列を指定できる',
    'String',
    'selfの末尾から引数で指定する改行コードを\r\n取り除いた文字列を生成して返す。',
    'String#chomp',
  ],
  [
    '032',
    'String#concat',
    '082',
    'String',
    '連結する文字列',
    'String',
    '文字列の連結をする。',
    'String#concat',
  ],
  [
    '033',
    'String#empty?',
    '083',
    'String',
    'なし',
    'bool',
    '空文字かを判定する。',
    'String#empty?',
  ],
  [
    '034',
    'String#include?',
    '084',
    'String',
    '検索する文字列',
    'bool',
    '引数の文字列が含まれるかを判定する。',
    'String#include?',
  ],
  [
    '035',
    'String#gsub',
    '085',
    'String',
    '置換パターンと置換後の文字列',
    'String',
    'パターンにマッチする全ての文字列の\r\n置換を行う。',
    'String#gsub',
  ],
  [
    '036',
    'String#size',
    '086',
    'String',
    'なし',
    'Integer',
    '文字列の長さを返す。',
    'String#size',
  ],
  [
    '037',
    'String#match?',
    '087',
    'String',
    'パターンとなる正規表現か文字列',
    'bool',
    'パターンにマッチするかを判定する。',
    'String#match?',
  ],
  [
    '038',
    'String#strip',
    '088',
    'String',
    'なし',
    'String',
    '先頭と末尾の空白文字を取り除く。',
    'String#strip',
  ],
  [
    '039',
    'String#chars',
    '089',
    'String',
    'なし',
    'Array',
    '文字列の各文字を文字列の配列で返す。',
    'String#chars',
  ],
  [
    '040',
    'Symbol.all_symbols',
    '090',
    'Symbol',
    'なし',
    'Array',
    '定義済みのすべてのシンボルオブジェクトの配列を返す。',
    'Symbol.all_symbols',
  ],
  [
    '041',
    'Comparable#clamp',
    '091',
    'Comparable',
    '下端と上端の2つの値かRangeをとる',
    'Object',
    '下端と上端の範囲に収まる値を返す。',
    'Comparable#clamp',
  ],
  [
    '042',
    'Enumerable#map',
    '092',
    'Enumerable',
    '各要素を評価するブロックをとった場合',
    'Array',
    '各要素に対しブロックを評価した結果を全て含む配列を返す。',
    'Enumerable#map',
  ],
  [
    '043',
    'Enumerable#lazy',
    '093',
    'Enumerable',
    'なし',
    'Enumerator::Lazy',
    '自身を遅延評価を行うEnumeratorに変換したものを返す。',
    'Enumerable#lazy',
  ],
  [
    '044',
    'Enumerable#tally',
    '094',
    'Enumerable',
    '結果を加算するHashを指定できる',
    'Hash',
    '自身に含まれる要素を数え上げた結果をHashで返す。',
    'Enumerable#tally',
  ],
  [
    '045',
    'Enumerable#\r\neach_with_object',
    '095',
    'Enumerable',
    '初期値となる引数とブロック引数',
    'Object',
    '引数オブジェクトと要素をブロックに繰り返し渡し、最初に与えたオブジェクトを返す。',
    'Enumerable#each_with_object',
  ],
  [
    '046',
    'GC.disable',
    '096',
    'GC',
    'なし',
    'bool',
    'ガーベージコレクトを禁止する。',
    'GC.disable',
  ],
  [
    '047',
    'Kernel#binding',
    '097',
    'Kernel',
    'なし',
    'Binding',
    '変数・メソッドなど環境情報を含んだBindingオブジェクトを生成して返す。',
    'Kernel#binding',
  ],
  [
    '048',
    'Kernel#puts',
    '098',
    'Kernel',
    '出力するオブジェクトを任意個指定できる',
    'nil',
    '標準出力に出力する。',
    'Kernel#puts',
  ],
  [
    '049',
    'Math.#sqrt',
    '099',
    'Math',
    '正の実数',
    'Float',
    '引数の平方根を返す。',
    'Math.#sqrt',
  ],
  [
    '050',
    'ObjectSpace\r\n.count_objects',
    '100',
    'ObjectSpace',
    'Hashをとることができる',
    'Hash',
    'オブジェクトを種類ごとにカウントした結果をHashとして返す。',
    'ObjectSpace.count_objects',
  ],
];

const initializeBoardCards = (): { id: String; nameText: String }[] => {
  return shuffleArray(
    cardList.map((item) => {
      return { id: item[0], nameText: item[1] };
    })
  );
};

const initializeReadingCards = (): { id: String; explainText: String }[] => {
  return shuffleArray(
    cardList.map((item) => {
      return { id: item[0], explainText: item[6] };
    })
  );
};

export { initializeBoardCards, initializeReadingCards };
